
// display velib coordinates
db.velib.find({},{longitude:1, latitude:1})

// use nummber field as id
db.velib.find().forEach(
        function(e) { 
                var id = e._id; 
                e._id = e.number;
                db.velib.insert(e); 
                db.velib.remove({_id: id}); 
        }
)

// update velib elements to add loc field from longitude et latitude and dept extracted from address
db.velib.find().forEach(
        function f(e) {
                // extract dept number
                var regex=/.*([0-9]{5}).*/; 
                var match = regex.exec(e.address);

                db.velib.update(
                        {_id: e._id}, 
                        {
                        $set:  {
                                loc: [e.longitude, e.latitude],
                                dept: match[1]
                                },
                        $unset: {
                                number: "",
                                longitude: "",
                                latitude: ""
                                }
                        }
                );
        }
)


// create index for loc field
db.velib.ensureIndex({"loc": "2d"})

// ----------------------------------------------------------------------------
// requests to find velib near to home
// ----------------------------------------------------------------------------
// find velib 0.01 unit away from home
db.velib.find({loc: {$near: [2.4003772, 48.8416919 ], $maxDistance : 0.01}})
db.velib.find({loc: {$near: [2.4003772, 48.8416919 ], $maxDistance : 0.01}}, {name:1})

// idem that previous request but also display distance
db.runCommand({geoNear: "velib", near: [2.4003772, 48.8416919 ], maxDistance: 0.01})
db.runCommand({geoNear: "velib", near: [2.4003772, 48.8416919 ], maxDistance: 0.01}).results.forEach(function(e) {print(e.dis + " - " + e.obj.name)})
db.runCommand({geoNear: "velib", near: [2.4003772, 48.8416919 ], maxDistance: 0.01}).results.sort(function(l,r) {return l.dis-r.dis}).forEach(function(e) {print(e.dis + " - " + e.obj.name + " - " + e.obj.address)})

// idem that previous request but use aggregate function
db.velib.aggregate([{$geoNear: {near: [2.4003772, 48.8416919], distanceField: "dist", maxDistance: 0.01 }}])
db.velib.aggregate([{$geoNear: {near: [2.4003772, 48.8416919], distanceField: "dist", maxDistance: 0.01 }}]).forEach(function(e) {print(e.dist + " - " + e.name + " - " + e.address)})


// ----------------------------------------------------------------------------
// requests to group velib by departement
// ----------------------------------------------------------------------------
// use group function
db.velib.group({ 
        key: {dept:1}, 
        reduce: function f(curr, res) {res.count += 1}, 
        initial: {count: 0} 
}).sort(function f(l,r) {
        return l.count - r.count
}).forEach(
        function f(e) {
                print(e.dept + " - " + e.count)
        }
)

// use aggregate pipeline with group + sort
db.velib.aggregate([
        {
                $group: {
                        _id: "$dept",
                        count: { $sum: 1 }
                }
        },
        {
                $sort: {count: 1}
        }
]).forEach(
        function f(e) {
                print(e._id + " - " + e.count)
        }
)


// ----------------------------------------------------------------------------
// count the occurences of same value; filter to keep only ones greater that 2; sum the result; display the result as a json object (without _id)
// ----------------------------------------------------------------------------

{ "_id" : ObjectId("50778ce69331a280cf4bcfc0"), "value" : 2 }
{ "_id" : ObjectId("50778ce69331a280cf4bcfc1"), "value" : 22 }
{ "_id" : ObjectId("50778ce69331a280cf4bcfc2"), "value" : 22 }
{ "_id" : ObjectId("50778ce69331a280cf4bcfc3"), "value" : 74 }
{ "_id" : ObjectId("50778ce69331a280cf4bcfc4"), "value" : 57 }
{ "_id" : ObjectId("50778ce69331a280cf4bcfc5"), "value" : 78 }
...

> db.funnynumbers.aggregate([{$group: {_id: "$value", count: {$sum:1}}}, {$match: {count: {$gt:2}}}, {$group: {_id: "", result: {$sum: "$_id"}}}, {$project: {_id: 0, result: 1}}])
{ "result" : 366 }

